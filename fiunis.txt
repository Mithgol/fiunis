**********************************************************************
FGHI                                FIDONET GLOBAL HYPERTEXT INTERFACE
**********************************************************************
Status:         draft
Revision:       initial incomplete draft
Title:          Fidonet Unicode substrings
Author:         Mithgol the Webmaster   (aka Sergey Sokoloff, 2:50/88)
Revision Date:  23 Jul 2014
-+--------------------------------------------------------------------
Contents:
   1. Status of this document
   2. Introduction
   3. Key words to indicate requirement levels
   4. 8-bit encoding of a Fidonet message
      containing Unicode substrings
   5. Decoding of an 8-bit Fidonet message
      containing Unicode substrings
-+--------------------------------------------------------------------

1. Status of this document
-+------------------------

  This document is a draft of a Fidonet Standards Proposal (FSP).

  This document specifies an optional Fidonet standard
  that can be used in the Fidonet community.

  Implementation of the standard defined in this document is not
  mandatory, but all implementations are expected to adhere
  to this standard.

  Distribution of this document is unlimited, 
  provided that its text is not altered without notice.

2. Introduction
-+-------------

  Many classic Fidonet message editors (such as GoldED+, for example)
  were designed as 8-bit applications. They expect that each character
  in a Fidonet message is coded by one byte. Therefore they won't ever
  support Unicode UTF-8 or UTF-16 encoding.

  This situation is a problem of "chicken and egg" type. The messages
  in UTF-8 charset do not appear in Fidonet because they won't ever be
  read in any of the popular readers. On the other hand, the absence
  of such messages means that there's no need for the developers of
  popular readers to improve their soft, or for their users to upgrade
  their readers or to choose some newer (Unicode-supporting) readers.

  This document specifies a simple method that would allow Unicode
  substrings to appear (encoded and escaped) within 8-bit strings.

  The method of encoding is based on the UTF-7 format (RFC 2152).

  The method of escaping is inspired by HTML character references
  (HTML 4.01 subsection 5.3.1, subsection 5.3.2).

  By implementing this method, the following situation is achieved:

  *) The users of newer (Unicode-supporting) Fidonet applications
     can read and write Unicode substrings in 8-bit messages.

  *) The users of older (8-bit) Fidonet applications can read the
     8-bit parts of the message. The Unicode susbstrings remain
     unintelligible, but that's natural for an 8-bit application,
     and brings only a minor discomfort, and serves as a reason
     for an upgrade.

3. Key words to indicate requirement levels
-+-----------------------------------------

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
  and "OPTIONAL" in this document are to be interpreted as described
  in FTA-1006 (based on RFC 2119).

4. 8-bit encoding of a Fidonet message containing Unicode substrings
-+------------------------------------------------------------------

  

5. Decoding of an 8-bit Fidonet message containing Unicode substrings
-+-------------------------------------------------------------------

  

**********************************************************************
EOTD                                               END OF THE DOCUMENT
**********************************************************************